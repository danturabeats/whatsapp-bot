console.log("--- MAIN BOT SCRIPT (RESTORE AND RUN) ---");
// =========================================================
// ◊ß◊ï◊ë◊• ◊û◊§◊¢◊ô◊ú ◊®◊ê◊©◊ô - index.js
// =========================================================

// ◊ò◊¢◊ô◊†◊™ ◊û◊©◊™◊†◊ô ◊°◊ë◊ô◊ë◊î ◊û◊ß◊ï◊ë◊• .env
require('dotenv').config();
const express = require('express');

// ◊ô◊ô◊ë◊ï◊ê ◊û◊ó◊ú◊ß◊™ ◊î◊ë◊ï◊ò ◊î◊®◊ê◊©◊ô◊™ ◊û◊î◊ß◊ï◊ë◊• ◊î◊ó◊ì◊© ◊©◊ô◊¶◊®◊†◊ï
const PresentorWhatsAppBot = require('./bot.js');
const mongoose = require('mongoose');

// ◊§◊ï◊†◊ß◊¶◊ô◊ô◊™ ◊î◊§◊¢◊ú◊î ◊®◊ê◊©◊ô◊™
async function main() {
    // ◊ï◊ì◊ê ◊©◊õ◊ú ◊î◊û◊§◊™◊ó◊ï◊™ ◊î◊†◊ì◊®◊©◊ô◊ù ◊ß◊ô◊ô◊û◊ô◊ù
    if (!process.env.GEMINI_API_KEY || !process.env.MONGODB_URI) {
        console.error('FATAL ERROR: Required environment variables (GEMINI_API_KEY, MONGODB_URI) are not defined in .env file.');
        process.exit(1);
    }

    // ◊î◊™◊ó◊ë◊®◊ï◊™ ◊ú◊û◊°◊ì ◊î◊†◊™◊ï◊†◊ô◊ù
    try {
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('Successfully connected to MongoDB Atlas.');
    } catch (error) {
        console.error('FATAL ERROR: Could not connect to MongoDB Atlas.', error);
        process.exit(1);
    }

    // ◊ô◊¶◊ô◊®◊™ ◊û◊ï◊§◊¢ ◊ó◊ì◊© ◊©◊ú ◊î◊ë◊ï◊ò
    const bot = new PresentorWhatsAppBot();

    // (◊ê◊ï◊§◊¶◊ô◊ï◊†◊ú◊ô) ◊î◊ê◊ñ◊†◊î ◊ú◊ê◊ô◊®◊ï◊¢◊ô◊ù ◊©◊î◊ë◊ï◊ò ◊û◊ô◊ô◊¶◊®
    bot.on('ready', () => {
        console.log('Main application confirmed: Bot is fully operational and ready.');
    });

    bot.on('newCustomer', (phoneNumber) => {
        console.log(`New customer detected in main application: ${phoneNumber}`);
    });

    bot.on('statistics', (data) => {
        // ◊õ◊ê◊ü ◊™◊ï◊õ◊ú, ◊ú◊û◊©◊ú, ◊ú◊©◊û◊ï◊® ◊ê◊™ ◊î◊†◊™◊ï◊†◊ô◊ù ◊ú-MongoDB
        // console.log('Statistics event received:', data);
    });

    // ◊î◊§◊¢◊ú◊™ ◊î◊ë◊ï◊ò
    bot.start().catch(error => {
        console.error('Failed to start the bot:', error);
        process.exit(1);
    });

    // Express server for Keep-Alive on Render + QR Code endpoint
    const app = express();
    const port = process.env.PORT || 3000;
    
    app.get('/', (req, res) => res.send(`
        <h1>WhatsApp Bot is running!</h1>
        <p>Status: Active ‚úÖ</p>
        <p><a href="/qr">View QR Code (when available)</a></p>
        <p><a href="/status">Bot Status</a></p>
    `));
    
    // QR Code endpoint
    app.get('/qr', (req, res) => {
        if (bot && bot.qrDataURL) {
            res.send(`
                <html>
                <head><title>WhatsApp QR Code</title></head>
                <body style="text-align: center; font-family: Arial;">
                    <h1>üì± Scan QR Code with WhatsApp</h1>
                    <img src="${bot.qrDataURL}" alt="WhatsApp QR Code" style="max-width: 512px;"/>
                    <p>‚è∞ QR Code expires quickly - scan immediately!</p>
                    <script>setTimeout(() => location.reload(), 5000);</script>
                </body>
                </html>
            `);
        } else {
            res.send(`
                <html>
                <head><title>No QR Code</title></head>
                <body style="text-align: center; font-family: Arial;">
                    <h1>No QR Code Available</h1>
                    <p>Bot is either already authenticated or not ready yet.</p>
                    <p><a href="/">Back to Home</a></p>
                    <script>setTimeout(() => location.reload(), 3000);</script>
                </body>
                </html>
            `);
        }
    });

    // Status endpoint  
    app.get('/status', (req, res) => {
        const status = {
            botReady: bot?.client?.info ? true : false,
            sessionBackupTime: bot?.sessionStore?.lastBackupTime,
            uptime: process.uptime(),
            memoryUsage: process.memoryUsage()
        };
        res.json(status);
    });

    app.listen(port, () => console.log(`Server for Keep-Alive is listening on port ${port}`));
}

// ◊ß◊®◊ô◊ê◊î ◊ú◊§◊ï◊†◊ß◊¶◊ô◊î ◊î◊®◊ê◊©◊ô◊™
main().catch(err => {
    console.error("An unexpected error occurred in the main function:", err);
    process.exit(1);
});